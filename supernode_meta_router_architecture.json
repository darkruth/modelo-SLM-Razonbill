{
  "core_components": {
    "nucleus_core": {
      "type": "Central Processing Unit",
      "description": "Núcleo C.A- Razonbilstro con LSTM+LTM+Attention",
      "components": [
        "Long Short-Term Memory (LSTM)",
        "Long-Term Memory (LTM) Database",
        "Attention Mechanisms",
        "Metacognitive Evaluation System",
        "Confidence Assessment Engine"
      ],
      "parameters": "Post-pruning optimized",
      "memory_capacity": "Unlimited LTM + 16k context window"
    },
    "temporal_observers": {
      "type": "Observation Network",
      "description": "Neuronas temporales con Knet integrado",
      "observers": {
        "nlp_observer": {
          "specialization": "Natural Language Processing",
          "knet_layers": 10,
          "parameters": "41,547 (post-pruning)",
          "original_parameters": "134,560",
          "reduction": "72.8%",
          "capabilities": [
            "Semantic analysis",
            "Intent recognition",
            "Context understanding",
            "Language translation"
          ]
        },
        "web_dev_observer": {
          "specialization": "Web Development",
          "knet_layers": 11,
          "parameters": "39,966 (post-pruning)",
          "original_parameters": "135,531",
          "reduction": "75.0%",
          "capabilities": [
            "Code generation",
            "Syntax analysis",
            "API knowledge",
            "Framework expertise"
          ]
        }
      },
      "memory_retention": "Without context (fixed weights)",
      "observation_mode": "Continuous automatic"
    },
    "meta_router": {
      "type": "Probabilistic Routing Engine",
      "description": "Sistema de enrutamiento inteligente",
      "routing_algorithm": "Knet-based probabilistic mapping",
      "decision_matrix": "Multi-dimensional confidence scoring",
      "specialization_routing": "Automatic domain detection",
      "fallback_mechanisms": "General purpose routing"
    }
  },
  "neural_layers": {
    "input_layer": {
      "type": "Multi-modal Input Processing",
      "tokenization": "RazonbilstroTokenizer (32k vocabulary)",
      "encoding": "UTF-8 + Hex support",
      "preprocessing": [
        "Text normalization",
        "Command detection",
        "Context extraction",
        "Semantic embedding"
      ]
    },
    "routing_layers": {
      "layer_1_domain_detection": {
        "function": "Primary domain classification",
        "algorithms": [
          "Knet probabilistic mapping",
          "Keyword analysis"
        ],
        "output": "Domain confidence scores"
      },
      "layer_2_specialization_routing": {
        "function": "Route to specialized observer",
        "decision_criteria": [
          "Confidence threshold",
          "Domain match",
          "Knet activation"
        ],
        "routing_options": [
          "nlp_observer",
          "web_dev_observer",
          "general_processing"
        ]
      },
      "layer_3_context_enhancement": {
        "function": "Enhance with specialized context",
        "sources": [
          "Knet weights",
          "Observer metadata",
          "Historical patterns"
        ],
        "output": "Enriched processing context"
      }
    },
    "processing_layers": {
      "lstm_layer": {
        "type": "Sequential Processing",
        "hidden_units": 512,
        "memory_cells": "Variable (context-dependent)",
        "attention_heads": 8
      },
      "attention_layer": {
        "type": "Multi-head Attention",
        "mechanism": "Self-attention + Cross-attention",
        "attention_heads": 8,
        "key_value_dim": 64
      },
      "output_layer": {
        "type": "Multi-modal Output Generation",
        "outputs": [
          "Text response",
          "Action commands",
          "Confidence scores"
        ],
        "post_processing": [
          "Response formatting",
          "Command parsing",
          "Quality assessment"
        ]
      }
    }
  },
  "routing_mechanisms": {
    "probabilistic_routing": {
      "algorithm": "Knet-based probability maps",
      "input_analysis": [
        "Text pattern recognition",
        "Semantic similarity scoring",
        "Historical success patterns"
      ],
      "decision_matrix": {
        "confidence_weighting": 0.4,
        "domain_matching": 0.3,
        "knet_activation": 0.2,
        "fallback_probability": 0.1
      }
    },
    "adaptive_routing": {
      "learning_mechanism": "Observer feedback integration",
      "adaptation_criteria": [
        "Response quality scores",
        "User satisfaction indicators",
        "Processing efficiency metrics"
      ],
      "route_optimization": "Continuous improvement based on metadata"
    },
    "fallback_systems": {
      "primary_fallback": "General purpose processing",
      "secondary_fallback": "Direct nucleus processing",
      "emergency_routing": "Basic pattern matching",
      "confidence_threshold": 0.3
    }
  },
  "specialization_domains": {
    "nlp_domain": {
      "coverage": [
        "Natural language understanding",
        "Conversational AI",
        "Text analysis and generation",
        "Language translation",
        "Semantic reasoning"
      ],
      "trigger_patterns": [
        "Questions (¿, what, how, why)",
        "Explanation requests",
        "Conversational inputs",
        "Text analysis tasks"
      ],
      "knet_specialization": "meta_enrutador_NLP.knet",
      "confidence_boost": "+30% for NLP tasks"
    },
    "web_development_domain": {
      "coverage": [
        "JavaScript/HTML5/CSS development",
        "Web framework knowledge",
        "API development",
        "Frontend/Backend programming",
        "Code generation and analysis"
      ],
      "trigger_patterns": [
        "Programming keywords",
        "Code generation requests",
        "Web development terms",
        "Technical implementation queries"
      ],
      "knet_specialization": "meta_enrutador_REAL_JS_HTML5.knet",
      "confidence_boost": "+30% for web dev tasks"
    },
    "general_domain": {
      "coverage": [
        "System commands",
        "File operations",
        "General assistance",
        "Unspecialized queries"
      ],
      "processing_mode": "Direct nucleus processing",
      "fallback_role": "Handle unrouted requests"
    }
  },
  "integration_interfaces": {
    "input_interfaces": {
      "text_interface": {
        "encoding": "UTF-8",
        "max_length": "Unlimited (chunked processing)",
        "preprocessing": "Tokenization + normalization"
      },
      "hex_interface": {
        "encoding": "Hexadecimal",
        "purpose": "Binary data processing",
        "conversion": "Automatic hex-to-semantic"
      },
      "command_interface": {
        "protocol": "Terminal commands",
        "discrimination": "TTS vs Terminal routing",
        "processing": "Kitty terminal bridge"
      }
    },
    "output_interfaces": {
      "response_interface": {
        "formats": [
          "Plain text",
          "Structured JSON",
          "Command outputs"
        ],
        "post_processing": "Confidence scoring + quality assessment"
      },
      "action_interface": {
        "capabilities": [
          "Terminal execution",
          "File operations",
          "System commands"
        ],
        "safety_filters": "Command validation + permission checks"
      },
      "metadata_interface": {
        "exports": [
          "Processing logs",
          "Route decisions",
          "Performance metrics"
        ],
        "format": "Binary metadata files"
      }
    }
  },
  "optimization_systems": {
    "automatic_training": {
      "trigger": "Every processing cycle",
      "mechanism": "3-agent system (2 observers + 1 trainer)",
      "improvement_detection": "Automatic with 0.270 threshold",
      "cycle_restart": "On improvement detection"
    },
    "surgical_pruning": {
      "redundancy_elimination": "Massive pruning (73.9% average reduction)",
      "integrity_preservation": "Structural integrity checks",
      "performance_optimization": "36.9% improvement achieved",
      "memory_optimization": "66.5% memory savings"
    },
    "hyperparameter_optimization": {
      "learning_rate": "0.0005 (post-pruning optimized)",
      "attention_heads": 8,
      "confidence_threshold": 0.7,
      "batch_size": 32,
      "regularization": "L2 with adaptive strength"
    },
    "hex_semantic_processing": {
      "dataset_generation": "Automatic from metadata",
      "conversion_pipeline": "Metadata → Hex → Semantic → Training",
      "bidirectional_mapping": "Hex ↔ Semantic conversion",
      "training_integration": "Direct nucleus enhancement"
    }
  },
  "metadata_processing": {
    "generation_system": {
      "automatic_triggers": "Every 10 observations per neuron",
      "metadata_types": [
        "Interaction patterns",
        "Processing metrics",
        "Route decisions",
        "Performance indicators"
      ],
      "storage_format": "Binary files in binaget/ structure"
    },
    "enhancement_pipeline": {
      "knet_enrichment": "Integration with Knet context",
      "specialization_tagging": "Domain-specific metadata",
      "temporal_correlation": "Cross-session pattern analysis",
      "quality_scoring": "Relevance and importance metrics"
    },
    "utilization_system": {
      "hex_semantic_conversion": "Automatic dataset creation",
      "training_data_generation": "Enhanced nucleus training",
      "performance_optimization": "Feedback loop for improvements",
      "system_evolution": "Continuous learning enhancement"
    }
  },
  "hex_semantic_engine": {
    "conversion_engine": {
      "hex_encoding": "Metadata → JSON → UTF-8 → Hexadecimal",
      "semantic_generation": "Context-aware natural language descriptions",
      "bidirectional_support": "Hex→Semantic and Semantic→Hex",
      "quality_validation": "Conversion integrity checks"
    },
    "dataset_creation": {
      "automatic_generation": "From observer metadata",
      "format": "JSONL with paired entries",
      "specialization_support": "Domain-specific datasets",
      "training_integration": "Direct nucleus enhancement"
    },
    "processing_pipeline": {
      "input_analysis": "Detect hex vs semantic input",
      "conversion_routing": "Appropriate conversion direction",
      "context_enhancement": "Knet-based context addition",
      "output_optimization": "Quality and relevance scoring"
    }
  }
}